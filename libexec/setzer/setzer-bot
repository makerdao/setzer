#!/usr/bin/env bash
### setzer-bot -- really cool feedbot
### Usage: setzer bot [options]
### --
###   Options:
### auto                 run setzer bot in auto mode (no user interaction)
### C,config=file        configuration file
### S,spread=percent     minimum percent deviation to update (default: 1)
### I,interval=seconds   seconds to wait between checks (default: 60)
### R,resend=seconds     seconds to wait before resending tx (default: 90)
###
###   Gas options:
### gas-start=gas        starting gas price per tx in wei
### gas-inc=gas          amount to increment gas price per tx in wei
### gas-max=gas          maximum gas price to pay per tx in wei
###
###   Miscellaneous:
### verbose              output extra information (useful for debugging)

#set -ex

function log {
  echo "[$(date "+%D %T")] $1"
}

function verbose {
  [[ $SETZER_VERBOSE ]] && echo "[$(date "+%D %T")] [V] $1"
}

# Global configuration
if [[ -e /etc/setzer.conf ]]; then
  # shellcheck source=/dev/null
  . "/etc/setzer.conf"
  #verbose "Imported configuration from /etc/setzer.conf"
fi

# Local configuration (via -C or --config)
# Useful for running multiple bots on one box
if [[ -e $SETZER_CONF ]]; then
  # shellcheck source=/dev/null
  . "$SETZER_CONF"
  #verbose "Imported configuration from $SETZER_CONF"
fi

# check we're connected to ethereum
unset ETH_RPC_URL
while [[ "$(setzer connected)" != "true" ]]; do
  unset ETH_RPC_URL
  for port in ${RPC_PORTS:-8545}; do
    export ETH_RPC_PORT=$port
    log "Trying on rpc port $ETH_RPC_PORT."
    [[ "$(setzer connected)" == "true" ]] && ok=true && break
  done
  if [[ "$ok" != "true" ]]; then
                for url in $RPC_URLS; do
                        export ETH_RPC_URL=$url
                        log "Trying on rpc url $ETH_RPC_URL"
                        [[ "$(setzer connected)" == "true" ]] && break && url_ok=true
                done
                [[ "$ok" == "true" ]] && unset ETH_RPC_URL
                [[ "$url_ok" == "true" ]] && ok=true
  fi
  [[ "$ok" != "true" ]] && log "Not connected to Ethereum, retry in 10 seconds..." && sleep 10
done
[[ -z "$ETH_RPC_URL" ]] && log "Node running on rpc port ${ETH_RPC_PORT:-8545}."
[[ -n "$ETH_RPC_URL" ]] && log "Node running on rpc url $ETH_RPC_URL."

[[ $ETH_FROM ]] || errors+=("No default account set. Please set it via ETH_FROM ")
[[ $SETZER_FEED ]] || errors+=("No price feed set. Please set it via SETZER_FEED ")
[[ $SETZER_MEDIANIZER ]] || errors+=("No medianizer set. Please set it via SETZER_MEDIANIZER ")
#[[ $SETZER_SOURCES ]] || errors+=("No price sources set. Please set them via SETZER_SOURCES ")

[[ ${errors[*]} ]] && { printf '%s\n' "${errors[@]}"; exit 1; }

[[ $SETZER_SPREAD ]] || export SETZER_SPREAD=2

[[ $SETZER_INTERVAL_SECONDS ]] || export SETZER_INTERVAL_SECONDS=300
[[ $SETZER_WAIT_FOR_RESEND ]] || export SETZER_WAIT_FOR_RESEND=300

[[ $SETZER_NEXT_EXPIRATION_HOURS ]] || export SETZER_NEXT_EXPIRATION_HOURS=12
[[ $SETZER_EXPIRES_IN_SECONDS ]] || export SETZER_EXPIRES_IN_SECONDS=3600

max_gas=$(seth --to-wei 500 gwei 2> /dev/null || echo 500000000000 )
[[ $SETZER_MAX_GAS_PRICE ]] || export SETZER_MAX_GAS_PRICE=$max_gas

# NOTE: Nice way to see if bots are updated. Increase this by 1 on new versions :)
export ETH_GAS=200200

# Initialization
if ! [[ $SETZER_BOT_INIT ]]; then
  export SETZER_BOT_INIT=1
  export SETH_ASYNC=yes

  export PATH="$PATH:/usr/local/bin/:/usr/bin/"

  echo "--------- STARTING SETZER BOT ---------"
  echo "Bot started $(date)"
  
  echo "Default account:     $ETH_FROM"
  echo "Feed address:        $SETZER_FEED"
  echo "Medianizer address:  $SETZER_MEDIANIZER"
  echo "Spread to update:    $SETZER_SPREAD %"
  echo ""
  echo "Max gas price:       $SETZER_MAX_GAS_PRICE wei"
  echo ""
  echo "Auto Mode:           $SETZER_AUTO"
  echo ""
  echo "Price check loop:    $SETZER_INTERVAL_SECONDS seconds"
  echo "Resend tx loop  :    $SETZER_WAIT_FOR_RESEND seconds"
  echo ""
  echo "------- INITIALIZATION COMPLETE -------"
fi

expires=$(setzer expires "$SETZER_FEED")
log "Expires in $(setzer --format "$expires")"
if [ "$expires" -lt "$SETZER_EXPIRES_IN_SECONDS" ]; then
  log "Expires soon, will update..."
  needsupdate="yes"
fi

feed=$(setzer peek "$SETZER_FEED")
mapfile -t feed <<< "$feed"
old=${feed[0]}

if [[ $SETZER_SOURCES == *"mkr" ]]; then
  new=$(setzer price mkr || echo 0)
elif [[ $SETZER_SOURCES == *"rep" ]]; then
  new=$(setzer price rep || echo 0)
elif [[ $SETZER_SOURCES == *"poly" ]]; then
  new=$(setzer price poly || echo 0)
elif [[ $SETZER_SOURCES == *"bat" ]]; then
  new=$(setzer price bat || echo 0)
else 
  new=$(setzer price eth || echo 0)
fi

check_new=$(bc <<< "$new > 0")
if ! [[ $check_new -eq "1" ]]; then
  log "Price was invalid. Waiting 1 minute then trying again"
  sleep 60
  exec "$0" "$@"
fi

spread=$(setzer spread "$old" "$new")
log "Old ($old) New ($new) Spread ($spread)"
test=$(bc <<< "${spread#-} >= ${SETZER_SPREAD}")
# Check if value has changed more than $SPREAD %
if [[ ${test} -ne 0 ]]; then
  needsupdate="yes"
  log "Spread larger than $SETZER_SPREAD, will update."
else
  verbose "($spread) less than $SETZER_SPREAD"
fi

# Check if we have transactions pending
ptn=$PENDING_TRANSACTION_NONCE
if [[ $ptn ]]; then
  nonce=$(seth nonce "$ETH_FROM")
  verbose "Transaction pending. Checking if nonce $nonce has increased."
  if [[ "$nonce" -gt "$ptn"  ]]; then
    mined="yes"
    log "SUCCESS! Feed updated. Gas price was $ETH_GAS_PRICE wei"
  else
    verbose "Transaction still pending..."
  fi
fi

if [[ $mined ]]; then
  export PENDING_TRANSACTION_NONCE=
else
  if [[ $ptn ]]; then
    loop=$(( CURRENT_LOOP + 1 ))
    export CURRENT_LOOP=$loop
    
    current_gas_price=$(seth gas-price)
    minimum_new_gas_price=$(bc <<< "$ETH_GAS_PRICE * 1.15 / 1")
    
    if [[ $current_gas_price -le $minimum_new_gas_price ]]; then
      new_gas_price=$minimum_new_gas_price
    else
      new_gas_price=$current_gas_price
    fi
    
    export ETH_GAS_PRICE=$new_gas_price
    
    if [[ $new_gas_price -le $SETZER_MAX_GAS_PRICE ]]; then
      log "New gas price: $ETH_GAS_PRICE"
      needsupdate="yes"
    else
      log "Max gas price reached ($SETZER_MAX_GAS_PRICE)... What to do?"
      needsupdate=
    fi
  fi
fi

if [[ $needsupdate ]]; then
  [[ ! $SETZER_AUTO ]] && read -r -p "Send transaction? [y/N] " response
  if [[ $SETZER_AUTO || "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
    CURRENT_LOOP=1
    # If there is no pending tx, reset initial gas price and nonce
    # TODO: let user choose if setzer will handle starting gas
    if ! [[ $ptn ]]; then
      nonce=$(seth nonce "$ETH_FROM")
      export ETH_NONCE=$nonce
      reset_gas=$(seth gas-price)
      [[ $reset_gas ]] || reset_gas=$(seth gas-price)
      export ETH_GAS_PRICE=$reset_gas
      verbose "Creating new transaction with gas $ETH_GAS_PRICE and nonce $ETH_NONCE"
    fi
    until=$(date +%s -d'+'$SETZER_NEXT_EXPIRATION_HOURS' hour')
    log "Sending with nonce $ETH_NONCE and gas price $ETH_GAS_PRICE wei"
    tx=$(setzer post "$SETZER_FEED" "$new" "$until" "$SETZER_MEDIANIZER")
    if [[ $tx ]]; then
      log "$tx"
      export PENDING_TRANSACTION_NONCE=$ETH_NONCE
    else
      # No transaction created. Either nonce issues or needs higher gas price
      log "Error creating transaction..."
      error_wait_seconds=30
    fi
  fi
fi

if [ $error_wait_seconds ]; then
  wait=$error_wait_seconds
elif [ "$PENDING_TRANSACTION_NONCE" ]; then
  wait=$SETZER_WAIT_FOR_RESEND
else
  wait=$SETZER_INTERVAL_SECONDS
fi
log "Waiting $wait seconds"
sleep $wait
exec "$0" "$@"
